package dao.impl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import dao.GenericDAO;
import model.HangHoaModel;
import model.HoaDonModel;
import model.KhachHangModel;

public class AbstractDAO<T> implements GenericDAO<T> {

	public Connection getConnection() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			String url = "jdbc:mysql://localhost:3306/javacore";
			String user = "root";
			String password = "password";
			return DriverManager.getConnection(url, user, password);
		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<T> query(String sql, String db, Object... paramenter) {
		List<T> result = new ArrayList<T>();
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet resultSet = null;
		try {
			connection = getConnection();
			statement = connection.prepareStatement(sql);
			setParameter(statement, paramenter);
			resultSet = statement.executeQuery();
			while (resultSet.next()) {
				result.add(mapRow(resultSet, db));
			}
			return result;
		} catch (SQLException e) {
			return null;
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (statement != null) {
					statement.close();
				}
				if (resultSet != null) {
					resultSet.close();
				}
			} catch (SQLException e) {
				return null;
			}
		}
	}

	private T mapRow(ResultSet resultSet, String db) {
		if (db.equals("hanghoa")) {
			HangHoaModel hhmd = null;
			try {
				hhmd.setId(resultSet.getLong("id"));
				hhmd.setName(resultSet.getString("name"));
				hhmd.setPrice(resultSet.getInt("price"));
				hhmd.setQuantity(resultSet.getInt("quantity"));
				return (T) hhmd;
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		if (db.equals("hoadon")) {
			HoaDonModel hdmd = null;
			try {
				hdmd.setDateOfPurchase(resultSet.getTimestamp("dateofpurchase"));
				hdmd.setIdentityCard(resultSet.getLong("identitycard"));
				hdmd.setIdHD(resultSet.getLong("idHD"));
				hdmd.setIdHH(resultSet.getLong("idHH"));
				hdmd.setNameGuest(resultSet.getString("nameguest"));
				hdmd.setNameProduct(resultSet.getString("nameproduct"));
				hdmd.setQuantity(resultSet.getInt("quantity"));
				hdmd.setTotalPrice(resultSet.getInt("totalprice"));
				return (T) hdmd;
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		if (db.equals("khachhang")) {
			KhachHangModel khmd = null;
			try {
				khmd.setId(resultSet.getLong("id"));
				khmd.setName(resultSet.getString("name"));
				khmd.setDateOfBirth(resultSet.getTimestamp("dateofbirth"));
				khmd.setGender(resultSet.getString("gender"));
				return (T) khmd;
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return null;
	}

	private void setParameter(PreparedStatement statement, Object... paramenter) {
		try {
			for(int i=0;i<paramenter.length;i++) {
				Object parameter=paramenter[i];
				int index = i + 1;
				if (parameter instanceof Long) {
					statement.setLong(index, (Long) parameter);
				} else if (parameter instanceof String) {
					statement.setString(index, (String) parameter);
				} else if (parameter instanceof Integer) {
					statement.setInt(index, (Integer) parameter);
				} else if (parameter instanceof Timestamp) {
					statement.setTimestamp(index, (Timestamp) parameter);
				}
			}
		}catch (SQLException e) {
			e.printStackTrace();
		}
	}

}
